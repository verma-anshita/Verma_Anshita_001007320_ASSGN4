/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.House;
import model.Person;
import model.System;

/**
 *
 * @author anshitaverma
 */
public class PersonJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PersonJPanel
     */
    
    private JPanel displayJPanel;
    private System system;
    private House house;
    
    public PersonJPanel(JPanel displayJpanel, System system, House house) {
        this.displayJPanel=displayJpanel;
        this.system=system;
        this.house=house;
        initComponents();
        populateTable();
    }

    public void populateTable() {
        
        DefaultTableModel model = (DefaultTableModel) personsJTable.getModel();
        model.setRowCount(0);
        if(house.getPersons()!=null){
              for(Person person:house.getPersons()){
            Object[] row = new Object[4];
            row[0]=person;
            row[1]=person.getAge();
            row[2]=formatDate(person.getCreatedDate());
            row[3]=formatDate(person.getLastUpdatedDate());
            
            model.addRow(row);
        }
        }
      
    }
    
    private String formatDate(Date date){
       
        String pattern = "yyyy-MM-dd HH:mm:ss";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
        return simpleDateFormat.format(date);
    }    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        goJButton = new javax.swing.JButton();
        personsJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        personsJTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        deletejButton = new javax.swing.JButton();
        viewjButton = new javax.swing.JButton();
        addjButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));

        goJButton.setText("Proceed >");
        goJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goJButtonActionPerformed(evt);
            }
        });

        personsJLabel.setFont(new java.awt.Font("Malayalam Sangam MN", 1, 18)); // NOI18N
        personsJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        personsJLabel.setText("Patient's Record");

        personsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Created On", " Updated On"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(personsJTable);

        backJButton.setText("< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        deletejButton.setText("Delete");
        deletejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletejButtonActionPerformed(evt);
            }
        });

        viewjButton.setText("View/Update");
        viewjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewjButtonActionPerformed(evt);
            }
        });

        addjButton.setText("Add");
        addjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addjButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewjButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deletejButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(goJButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 719, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(103, 103, 103)
                            .addComponent(personsJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(personsJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goJButton)
                    .addComponent(deletejButton)
                    .addComponent(viewjButton)
                    .addComponent(addjButton)
                    .addComponent(backJButton))
                .addGap(33, 33, 33))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void goJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = personsJTable.getSelectedRow();
        if(selectedRow <0){
            JOptionPane.showMessageDialog(this, "Please Select any Person to View his Medical History");
            return;
        }

        showPatientInfo(selectedRow);
    }//GEN-LAST:event_goJButtonActionPerformed

    private void showPatientInfo(int selectedRow) {
        
        DefaultTableModel model = (DefaultTableModel) personsJTable.getModel();
        Person person = (Person) model.getValueAt(selectedRow, 0);
        navigateToPatientHistory(person);
    }
    
    private void navigateToPatientHistory(Person person) {
        
        EncounterHistoryJPanel encounterHistoryJPanel = new EncounterHistoryJPanel(displayJPanel,system,person);
        displayJPanel.add("PatientHistory",encounterHistoryJPanel);
        CardLayout cardLayout = (CardLayout) displayJPanel.getLayout();
        cardLayout.next(displayJPanel);
    }
    
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        displayJPanel.remove(this);
        CardLayout cardLayout =  (CardLayout) displayJPanel.getLayout();
        cardLayout.previous(displayJPanel);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void deletejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletejButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = personsJTable.getSelectedRow();
        if(selectedIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete Patient");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) personsJTable.getModel();
        Person person = (Person) model.getValueAt(selectedIndex, 0);
        house.getPersons().remove(person);
        system.getPersonDirectory().getPersons().remove(person);
        system.getPatientDirectory().getPatients().remove(person.getPatient());
        populateTable();
        
    }//GEN-LAST:event_deletejButtonActionPerformed

    private void viewjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewjButtonActionPerformed
        // TODO add your handling code here:
        
        int selectedIndex = personsJTable.getSelectedRow();
        if(selectedIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to Display Patient Record");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) personsJTable.getModel();
        Person person = (Person) model.getValueAt(selectedIndex, 0);
        navigateToPersonView(person);
    }//GEN-LAST:event_viewjButtonActionPerformed

    private void addjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addjButtonActionPerformed
        // TODO add your handling code here:
        AddPersonJPanel addPersonJPanel = new AddPersonJPanel(displayJPanel, system, house);
        displayJPanel.add("AddPersonPanel", addPersonJPanel);
        CardLayout cardLayout = (CardLayout) displayJPanel.getLayout();
        cardLayout.next(displayJPanel);
    }//GEN-LAST:event_addjButtonActionPerformed

    private void navigateToPersonView(Person person) {
        
        ViewPersonJPanel viewPersonJPanel = new ViewPersonJPanel(displayJPanel,system,person);
        displayJPanel.add("ViewPersonPanel",viewPersonJPanel);
        CardLayout cardLayout = (CardLayout) displayJPanel.getLayout();
        cardLayout.next(displayJPanel);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addjButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton deletejButton;
    private javax.swing.JButton goJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel personsJLabel;
    private javax.swing.JTable personsJTable;
    private javax.swing.JButton viewjButton;
    // End of variables declaration//GEN-END:variables
}
