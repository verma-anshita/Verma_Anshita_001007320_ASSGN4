/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Community;
import model.House;
import model.Patient;
import model.Person;
import model.System;

/**
 *
 * @author anshitaverma
 */
public class houseJPanel extends javax.swing.JPanel {

    /**
     * Creates new form houseJPanel
     */
    private JPanel displayJPanel;
    private System system;
    private Community community;
    
    public houseJPanel(JPanel displayJPanel, System system, Community community) {
        this.displayJPanel=displayJPanel;
        this.system=system;
        this.community=community;
        initComponents();
        populateHouses();
    }
    
    public void populateHouses() {
        
        DefaultTableModel model = (DefaultTableModel) housesJTable.getModel();
        model.setRowCount(0);
        if(community.getHouses()!=null){
              for(House house:community.getHouses()){
            Object[] row = new Object[3];
            row[0] = house;
            row[1] = formatDate(house.getCreatedDate());
            row[2] = formatDate(house.getLastUpdatedDate());
       
            
            model.addRow(row);
        }
        }
      
    }

    private String formatDate(Date date){
       
        String pattern = "yyyy-MM-dd HH:mm:ss";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
        return simpleDateFormat.format(date);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        goJButton = new javax.swing.JButton();
        housesJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        housesJTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        deleteJButton = new javax.swing.JButton();
        viewJButton = new javax.swing.JButton();
        addJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));

        goJButton.setText("Proceed>");
        goJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goJButtonActionPerformed(evt);
            }
        });

        housesJLabel.setFont(new java.awt.Font("Malayalam Sangam MN", 1, 18)); // NOI18N
        housesJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        housesJLabel.setText("Houses Present");

        housesJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "House Name", "Created On", "Updated On"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(housesJTable);

        backJButton.setText("< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        deleteJButton.setText("Delete");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        viewJButton.setText("View/Update");
        viewJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewJButtonActionPerformed(evt);
            }
        });

        addJButton.setText("Add");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(goJButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(housesJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(197, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(housesJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goJButton)
                    .addComponent(deleteJButton)
                    .addComponent(viewJButton)
                    .addComponent(addJButton)
                    .addComponent(backJButton))
                .addContainerGap(64, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void goJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = housesJTable.getSelectedRow();
        if(selectedRow <0){
            JOptionPane.showMessageDialog(this, "Please Select any House to View the Patients");
            return;
        }

        showPersonsInCommunity(selectedRow);
    }//GEN-LAST:event_goJButtonActionPerformed

    private void showPersonsInCommunity(int selectedRow) {
        
        DefaultTableModel model = (DefaultTableModel) housesJTable.getModel();
        House house = (House) model.getValueAt(selectedRow, 0);
        navigateToPersons(house);
    }
    
    private void navigateToPersons(House house) {
        
        PersonJPanel personJPanel = new PersonJPanel(displayJPanel,system,house);
        displayJPanel.add("PersonsInformation", personJPanel);
        CardLayout cardLayout = (CardLayout) displayJPanel.getLayout();
        cardLayout.next(displayJPanel);
    }
    
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        displayJPanel.remove(this);
        CardLayout cardLayout =  (CardLayout) displayJPanel.getLayout();
        cardLayout.previous(displayJPanel);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = housesJTable.getSelectedRow();
        if(selectedRow <0){
            JOptionPane.showMessageDialog(this, "Please Select any House to delete");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) housesJTable.getModel();
        House house  = (House) model.getValueAt(selectedRow, 0);
        community.getHouses().remove(house);
    
        if(house.getPersons()!=null){
         system.getPersonDirectory().getPersons().removeAll(house.getPersons());
         List<Patient> patientsToRemove = new ArrayList<>();
         for(Person person:house.getPersons()){
            patientsToRemove.add(person.getPatient());
        }
         system.getPatientDirectory().getPatients().removeAll(patientsToRemove);
        }
        
  
       
        JOptionPane.showMessageDialog(this, "Successfully deleted the House");
        populateHouses();
    }//GEN-LAST:event_deleteJButtonActionPerformed

    private void viewJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = housesJTable.getSelectedRow();
        if(selectedRow <0){
            JOptionPane.showMessageDialog(this, "Please Select any House to Update");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) housesJTable.getModel();
        House house  = (House) model.getValueAt(selectedRow, 0);
        ViewHouseJPanel viewHouseJPanel = new ViewHouseJPanel(displayJPanel, system, house);
        displayJPanel.add("ViewHousePanel", viewHouseJPanel);
        CardLayout cardLayout = (CardLayout) displayJPanel.getLayout();
        cardLayout.next(displayJPanel);
    }//GEN-LAST:event_viewJButtonActionPerformed

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed
        // TODO add your handling code here:
        AddHouseJPanel addHouseJPanel = new AddHouseJPanel(displayJPanel, system, community);
        displayJPanel.add("AddHousePanel",addHouseJPanel);
        CardLayout cardLayout = (CardLayout) displayJPanel.getLayout();
        cardLayout.next(displayJPanel);
    }//GEN-LAST:event_addJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JButton goJButton;
    private javax.swing.JLabel housesJLabel;
    private javax.swing.JTable housesJTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton viewJButton;
    // End of variables declaration//GEN-END:variables
}
